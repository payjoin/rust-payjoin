additional_cargo_args = ["--all-features"]
gitignore = true
examine_globs = [
	"payjoin/src/**/*.rs"
]
exclude_globs = [
]
exclude_re = [
	"impl\\s+(std::fmt::|core::fmt::|fmt::)?(Display|Debug)",
	"deserialize",
	"Iterator",
	".*Error",

    # ---------------------Crate-specific exclusions ---------------------
    # Timeout loops
    # src/receive/v1/mod.rs
    "interleave_shuffle", # Replacing index += 1 with index *= 1 in a loop causes a timeout due to an infinite loop

    # Trivial mutations
    # These exclusions are allowing code blocks to run with arithmetic involving zero and as a result are no-ops
    # payjoin/src/core/send/mod.rs
    "replace < with <= in PsbtContext::check_outputs",
    "replace > with >= in PsbtContext::check_fees",
    # payjoin/src/core/send/mod.rs
    "replace < with <= in PsbtContextBuilder::build_recommended", # clamping the fee contribution when the fee equals to the recommended fee does not do anything
    # payjoin/src/core/receive/v2/mod.rs	 
    "payjoin/src/core/receive/v2.mod.*replace \\* with [+/]$", # This targets mutations on the static TWENTY_FOUR_HOURS_DEFAULT_EXPIRATION that is not particularly useful to test for

    # TODO exclusions
    # payjoin/src/core/receive/v1/mod.rs
    "replace > with >= in WantsInputs::avoid_uih", # This mutation I am unsure about whether or not it is a trivial mutant and have not decided on how the best way to approach testing it is
    # payjoin/src/core/send/mod.rs
    "replace match guard proposed_txout.script_pubkey == original_output.script_pubkey with true in PsbtContext::check_outputs", # This non-deterministic mutation has a possible test to catch it
]
